
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpCookie;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HttpCrawler {
    private HttpURLConnection con;
    private List<HttpCookie> cookies;
    private Map<String, String> headers;
    
    public HttpCrawler(){
        cookies = new ArrayList<>();
        headers = new HashMap<>();
    }
    
    private HttpURLConnection openConnection(String urlStr, String method) throws ProtocolException, MalformedURLException, IOException, URISyntaxException {
        URI uri = new URI(urlStr);
        HttpURLConnection newCon = (HttpURLConnection) uri.toURL().openConnection();
        newCon.setRequestMethod(method);
        
        return newCon;
    }
    
    private String getPageBody() {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuffer body = new StringBuffer();
            while ((inputLine = in.readLine()) != null) {
                body.append(inputLine);
            }
            in.close();
            return body.toString();
        } catch (IOException e) {
            return null;
        }
    }
    private void setHeaders() {
        headers.forEach((key, value) -> con.setRequestProperty(key, value));
    }
    private void updateCookies() {
        String cookiesHeader = con.getHeaderField("Set-Cookie");
        
        if(cookiesHeader != null) {
            List<HttpCookie> newCookies = HttpCookie.parse(cookiesHeader);
            newCookies.forEach(newCookie -> {
                cookies.add(newCookie);
            });
        }
    }
    private void setCookies() {
        String cookieArray[] = new String[cookies.size()];
        
        for(int i = 0; i < cookieArray.length; i++) {
            cookieArray[i] = cookies.get(i).toString();
        }

        if(cookieArray.length > 0) {
            con.setRequestProperty("Cookie", String.join(";", cookieArray));}
    }
    public Response post(String url, Map<String,String> data) {
        return new Response(0, null, null, null);
    }
    public Response get(String url) {
        try {
            con = openConnection(url, "GET");
            
            setHeaders();
            
            setCookies();
            
            con.setConnectTimeout(5000);
            con.setReadTimeout(5000);
            
            int status = con.getResponseCode();

            updateCookies();
            
            String body = getPageBody();
            
            con.disconnect();
            
            return new Response(status, null, body, null);
        } catch(ProtocolException | MalformedURLException | URISyntaxException e) {
            System.out.println(e);
            return new Response(0, null, null, null);
        } catch(IOException e) {
            System.out.println(e);
            return new Response(0, null, null, null);
        }
    }
    public void addHeader(String key, String value) {
        headers.put(key, value);
    }
}
